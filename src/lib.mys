class SemVerError(Error):
    message: string

class PreRelease:
    """A semantic version pre-release.

    """

    _value: string

    def __init__(self, value: string):
        """Initialize a pre-release object from given string `value`.

        Raises SemVerError if `value` is not a valid semantic version
        pre-release.

        """

        mo = value.match(
            re"((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)"
            re"(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)")

        if mo is None:
            raise SemVerError(f"invalid semantic version pre-release '{value}'")

        self._value = mo.group(1)

    def __str__(self) -> string:
        return self._value

class BuildMetadata:
    """A semantic version build metadata.

    """

    _value: string

    def __init__(self, value: string):
        """Initialize a build metadata object from given string `value`.

        Raises SemVerError if `value` is not a valid semantic version
        build metadata.

        """

        mo = value.match(re"^([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*)$")

        if mo is None:
            raise SemVerError(f"invalid semantic version build metadata '{value}'")

        self._value = mo.group(1)

    def __str__(self) -> string:
        return self._value

class Version:
    """A semantic version.

    """

    major: u64
    minor: u64
    patch: u64
    pre_release: PreRelease
    build_metadata: BuildMetadata

    def __init__(self, version: string):
        """Initialize a version object from given string `version`.

        Raises SemVerError if `version` is not a valid semantic
        version.

        """

        mo = version.match(
            # major, minor and patch
            re"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)"
            # pre release
            re"(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)"
            re"(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?"
            # build metadata
            re"(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$")

        if mo is None:
            raise SemVerError(f"invalid semantic version '{version}'")

        self.major = u64(mo.group(1))
        self.minor = u64(mo.group(2))
        self.patch = u64(mo.group(3))

        value = mo.group(4)

        if value is not None:
            self.pre_release = PreRelease(value)
        else:
            self.pre_release = None

        value = mo.group(5)

        if value is not None:
            self.build_metadata = BuildMetadata(value)
        else:
            self.build_metadata = None

    def __eq__(self, other: Version) -> bool:
        return ((self.major == other.major)
                and (self.minor == other.minor)
                and (self.patch == other.patch))

    def __ne__(self, other: Version) -> bool:
        return not (self == other)

    def __lt__(self, other: Version) -> bool:
        if self.major < other.major:
            return True
        elif self.major == other.major:
            if self.minor < other.minor:
                return True
            elif self.minor == other.minor:
                if self.patch < other.patch:
                    return True

        return False

    def __gt__(self, other: Version) -> bool:
        return not (self <= other)

    def __le__(self, other: Version) -> bool:
        return self < other or self == other

    def __ge__(self, other: Version) -> bool:
        return not (self < other)

    def __str__(self) -> string:
        version = f"{self.major}.{self.minor}.{self.patch}"

        if self.pre_release is not None:
            version += f"-{self.pre_release}"

        if self.build_metadata is not None:
            version += f"+{self.build_metadata}"

        return version

@test
def test_version():
    version_string = "1.2.0-rc-4+meta"
    version = Version(version_string)
    assert version.major == 1
    assert version.minor == 2
    assert version.patch == 0
    assert str(version.pre_release) == "rc-4"
    assert str(version.build_metadata) == "meta"
    assert str(version) == version_string

    version_string = "3.1.2"
    version = Version(version_string)
    assert version.major == 3
    assert version.minor == 1
    assert version.patch == 2
    assert version.pre_release is None
    assert version.build_metadata is None
    assert str(version) == version_string

    version_string = "100.200.300+foo"
    version = Version(version_string)
    assert version.major == 100
    assert version.minor == 200
    assert version.patch == 300
    assert version.pre_release is None
    assert str(version.build_metadata) == "foo"
    assert str(version) == version_string

@test
def test_bad_versions():
    try:
        message = ""
        Version("1.0")
    except SemVerError as err:
        message = err.message

    assert message == "invalid semantic version '1.0'"

    try:
        message = ""
        Version("0.0.0.1")
    except SemVerError as err:
        message = err.message

    assert message == "invalid semantic version '0.0.0.1'"

@test
def test_compare():
    assert Version("1.0.0") > Version("0.0.0")
    assert Version("1.1.0") > Version("1.0.0")
    assert Version("1.1.1") > Version("1.1.0")
    assert not (Version("1.0.0") > Version("1.0.0"))

    assert Version("0.0.0") < Version("1.0.0")
    assert Version("1.0.0") < Version("1.1.0")
    assert Version("1.1.0") < Version("1.1.1")
    assert not (Version("1.0.0") < Version("1.0.0"))

    assert Version("0.1.0") == Version("0.1.0")
    assert Version("0.1.0") != Version("0.2.0")

    assert Version("1.1.0") <= Version("1.1.1")
    assert Version("1.1.1") <= Version("1.1.1")
    assert Version("1.1.1") >= Version("0.1.1")
    assert Version("2.1.1") >= Version("2.1.1")

    assert str(Version("1.0.0-rc4").pre_release) == "rc4"
    assert str(Version("1.0.0+2fd3493b").build_metadata) == "2fd3493b"

    version = Version("1.0.0-rc5+1fd3493b")
    assert version.major == 1
    assert version.minor == 0
    assert version.patch == 0
    assert str(version.pre_release) == "rc5"
    assert str(version.build_metadata) == "1fd3493b"
