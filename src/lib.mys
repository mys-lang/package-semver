class SemVerError(Error):
    message: string

class Version:
    """A semantic version.

    """

    major: u64
    minor: u64
    patch: u64
    pre_release: string
    build_metadata: string

    def __init__(self, version: string):
        """Initialize a version object from given string `version`.

        Raises SemVerError if `version` is not a valid semantic
        version.

        """

        mo = version.match(
            # major, minor and patch
            re"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)"
            # pre release
            re"(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)"
            re"(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?"
            # build metadata
            re"(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$")

        if mo is None:
            raise SemVerError(f"invalid semantic version '{version}'")

        self.major = u64(mo.group(1))
        self.minor = u64(mo.group(2))
        self.patch = u64(mo.group(3))
        self.pre_release = mo.group(4)
        self.build_metadata = mo.group(5)

    def __str__(self) -> string:
        version = f"{self.major}.{self.minor}.{self.patch}"

        if self.pre_release is not None:
            version += f"-{self.pre_release}"

        if self.build_metadata is not None:
            version += f"+{self.build_metadata}"

        return version

class _LatestVersionFinder:
    latest: Version

    def __init__(self):
        self.latest = None

    def add(self, version: string):
        semver = Version(version)

        if self.latest is None:
            self.latest = semver

            return

        if semver.major < self.latest.major:
            return
        elif semver.major == self.latest.major:
            if semver.minor < self.latest.minor:
                return
            elif semver.minor == self.latest.minor:
                if semver.patch < self.latest.patch:
                    return

        self.latest = semver

def is_later_version(version: string, latest_version: string) -> bool:
    """Returns True if `version` is later than `latest_version`, otherwise
    False.

    Raises SemVerError if `version` or `latest_version` is not a valid
    semantic version.

    """

    finder = _LatestVersionFinder()
    finder.add(version)
    finder.add(latest_version)

    return str(finder.latest) == version

@test
def test_is_later_version():
    assert is_later_version("1.0.0", "0.0.0")
    assert is_later_version("1.1.0", "1.0.0")
    assert is_later_version("1.1.1", "1.1.0")

    assert not is_later_version("0.0.0", "1.0.0")
    assert not is_later_version("1.0.0", "1.1.0")
    assert not is_later_version("1.1.0", "1.1.1")

@test
def test_is_later_version_bad_versions():
    try:
        message = ""
        is_later_version("1.0", "0.0.0")
    except SemVerError as err:
        message = err.message

    assert message == "invalid semantic version '1.0'"

    try:
        message = ""
        is_later_version("1.0.0", "0.0.0.1")
    except SemVerError as err:
        message = err.message

    assert message == "invalid semantic version '0.0.0.1'"

@test
def test_version():
    version_string = "1.2.0-rc-4+meta"
    version = Version(version_string)
    assert version.major == 1
    assert version.minor == 2
    assert version.patch == 0
    assert version.pre_release == "rc-4"
    assert version.build_metadata == "meta"
    assert str(version) == version_string

    version_string = "3.1.2"
    version = Version(version_string)
    assert version.major == 3
    assert version.minor == 1
    assert version.patch == 2
    assert version.pre_release is None
    assert version.build_metadata is None
    assert str(version) == version_string

    version_string = "100.200.300+foo"
    version = Version(version_string)
    assert version.major == 100
    assert version.minor == 200
    assert version.patch == 300
    assert version.pre_release is None
    assert version.build_metadata == "foo"
    assert str(version) == version_string
