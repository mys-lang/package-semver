class SemVerError(Error):
    message: string

class _LatestVersionFinder:
    latest: string
    _latest: (i64, i64, i64)

    def __init__(self):
        self.latest = None

    def add(self, version: string):
        mo = version.match(re"^(\d+)\.(\d+)\.(\d+)$")

        if mo is None:
            raise SemVerError(f"invalid semantic version '{version}'")

        major = i64(mo.group(1))
        minor = i64(mo.group(2))
        revision = i64(mo.group(3))

        if self.latest is None:
            self.latest = version
            self._latest = (major, minor, revision)

            return

        if major < self._latest[0]:
            return
        elif major == self._latest[0]:
            if minor < self._latest[1]:
                return
            elif minor == self._latest[1]:
                if revision < self._latest[2]:
                    return

        self.latest = version
        self._latest = (major, minor, revision)

def is_later_version(new_version: string, old_version: string) -> bool:
    """Returns True if `new_version` is later than `old_version`,
    otherwise False.

    Raises SemVerError if `new_version` or `old_version` is not a
    valid semantic version.

    """

    finder = _LatestVersionFinder()
    finder.add(new_version)
    finder.add(old_version)

    return finder.latest == new_version

@test
def test_is_later_version():
    assert is_later_version("1.0.0", "0.0.0")
    assert is_later_version("1.1.0", "1.0.0")
    assert is_later_version("1.1.1", "1.1.0")

    assert not is_later_version("0.0.0", "1.0.0")
    assert not is_later_version("1.0.0", "1.1.0")
    assert not is_later_version("1.1.0", "1.1.1")

@test
def test_is_later_version_bad_versions():
    try:
        message = ""
        is_later_version("1.0", "0.0.0")
    except SemVerError as err:
        message = err.message

    assert message == "invalid semantic version '1.0'"

    try:
        message = ""
        is_later_version("1.0.0", "0.0.0.1")
    except SemVerError as err:
        message = err.message

    assert message == "invalid semantic version '0.0.0.1'"
