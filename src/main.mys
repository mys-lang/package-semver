from ansicolors import BOLD
from ansicolors import RED
from ansicolors import RESET
from argparse import Args
from argparse import Parser
from . import SemVerError
from . import Version

def handle_increment(args: Args):
    try:
        version = Version(args.value_of("version"))

        match args.value_of("field"):
            case "major":
                version.increment_major()
            case "minor":
                version.increment_minor()
            case "patch":
                version.increment_patch()

        print(str(version))
    except SemVerError as error:
        raise SystemExitError(f"{RED}{BOLD}error{RESET}: {error.message}")

def main(argv: [string]):
    parser = Parser(version=__version__,
                    help="Semantic versioning tools.")
    increment_parser = parser.add_subcommand(
        "increment",
        help="Increment major, minor or patch.")
    increment_parser.add_positional(
        "field",
        choices=["major", "minor", "patch"],
        help="Field to increment (major, minor or patch).")
    increment_parser.add_positional("version", help="Current version.")
    args = parser.parse(argv)
    subcommand, args = args.subcommand()

    match subcommand:
        case "increment":
            handle_increment(args)
