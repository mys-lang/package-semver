from ansicolors import BOLD
from ansicolors import RED
from ansicolors import RESET
from argparse import Args
from argparse import Parser
from . import SemVerError
from . import Version

def handle_increment(args: Args):
    version = Version(args.value_of("version"))

    match args.value_of("field"):
        case "major":
            version.increment_major()
        case "minor":
            version.increment_minor()
        case "patch":
            version.increment_patch()

    print(str(version))

def handle_sort(args: Args):
    versions = [Version(version) for version in args.values_of("versions")]

    # ToDo: Just call versions.sort()
    for i in range(i64(len(versions))):
        for j in range(i + 1, i64(len(versions))):
            if versions[j] < versions[i]:
                version = versions[i]
                versions[i] = versions[j]
                versions[j] = version

    print(" ".join([str(version) for version in versions]))

def main(argv: [string]):
    parser = Parser(version=__version__,
                    help="Semantic versioning tools.")

    increment_parser = parser.add_subcommand(
        "increment",
        help="Increment major, minor or patch.")
    increment_parser.add_positional(
        "field",
        choices=["major", "minor", "patch"],
        help="Field to increment (major, minor or patch).")
    increment_parser.add_positional("version", help="Current version.")

    sort_parser = parser.add_subcommand(
        "sort",
        help="Sort versions from oldest to newest.")
    sort_parser.add_positional("versions", multiple_occurrences=True)

    args = parser.parse(argv)
    subcommand, args = args.subcommand()

    try:
        match subcommand:
            case "increment":
                handle_increment(args)
            case "sort":
                handle_sort(args)
    except SemVerError as error:
        raise SystemExitError(f"{RED}{BOLD}error{RESET}: {error.message}")
